<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\LoRaMac-as923\LoRaMac-as923.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\LoRaMac-as923\LoRaMac-as923.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Apr 04 10:54:50 2018
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
McpsIndication &rArr; OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[71]">RadioSetPublicNetwork</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">RadioSetModem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[57]">BoardGetBatteryLevel</a> from board.o(i.BoardGetBatteryLevel) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from sysirqhandlers.o(i.BusFault_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[40]">COMP_ACQ_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1f]">DAC_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from sysirqhandlers.o(i.DebugMon_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from gpio-board.o(i.EXTI0_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from gpio-board.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from gpio-board.o(i.EXTI1_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from gpio-board.o(i.EXTI2_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from gpio-board.o(i.EXTI3_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from gpio-board.o(i.EXTI4_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from gpio-board.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[22]">LCD_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[53]">McpsConfirm</a> from main.o(i.McpsConfirm) referenced from main.o(i.main)
 <LI><a href="#[54]">McpsIndication</a> from main.o(i.McpsIndication) referenced from main.o(i.main)
 <LI><a href="#[3]">MemManage_Handler</a> from sysirqhandlers.o(i.MemManage_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[55]">MlmeConfirm</a> from main.o(i.MlmeConfirm) referenced from main.o(i.main)
 <LI><a href="#[56]">MlmeIndication</a> from main.o(i.MlmeIndication) referenced from main.o(i.main)
 <LI><a href="#[1]">NMI_Handler</a> from sysirqhandlers.o(i.NMI_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[49]">OnAckTimeoutTimerEvent</a> from loramac.o(i.OnAckTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[44]">OnCalibrateSystemWakeupTimeTimerEvent</a> from board.o(i.OnCalibrateSystemWakeupTimeTimerEvent) referenced from board.o(i.CalibrateSystemWakeupTime)
 <LI><a href="#[59]">OnLed1TimerEvent</a> from main.o(i.OnLed1TimerEvent) referenced from main.o(i.main)
 <LI><a href="#[5a]">OnLed2TimerEvent</a> from main.o(i.OnLed2TimerEvent) referenced from main.o(i.main)
 <LI><a href="#[45]">OnMacStateCheckTimerEvent</a> from loramac.o(i.OnMacStateCheckTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4b]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4c]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4e]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4a]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[4d]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[47]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[48]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[46]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[58]">OnTxNextPacketTimerEvent</a> from main.o(i.OnTxNextPacketTimerEvent) referenced from main.o(i.main)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from rtc-board.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[63]">RadioCheckRfFrequency</a> from radio.o(i.RadioCheckRfFrequency) referenced from radio.o(.constdata)
 <LI><a href="#[5c]">RadioGetStatus</a> from radio.o(i.RadioGetStatus) referenced from radio.o(.constdata)
 <LI><a href="#[72]">RadioGetWakeupTime</a> from radio.o(i.RadioGetWakeupTime) referenced from radio.o(.constdata)
 <LI><a href="#[5b]">RadioInit</a> from radio.o(i.RadioInit) referenced from radio.o(.constdata)
 <LI><a href="#[73]">RadioIrqProcess</a> from radio.o(i.RadioIrqProcess) referenced from radio.o(.constdata)
 <LI><a href="#[5f]">RadioIsChannelFree</a> from radio.o(i.RadioIsChannelFree) referenced from radio.o(.constdata)
 <LI><a href="#[4f]">RadioOnDioIrq</a> from radio.o(i.RadioOnDioIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[51]">RadioOnRxTimeoutIrq</a> from radio.o(i.RadioOnRxTimeoutIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[50]">RadioOnTxTimeoutIrq</a> from radio.o(i.RadioOnTxTimeoutIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[60]">RadioRandom</a> from radio.o(i.RadioRandom) referenced from radio.o(.constdata)
 <LI><a href="#[6d]">RadioRead</a> from radio.o(i.RadioRead) referenced from radio.o(.constdata)
 <LI><a href="#[6f]">RadioReadBuffer</a> from radio.o(i.RadioReadBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[6b]">RadioRssi</a> from radio.o(i.RadioRssi) referenced from radio.o(.constdata)
 <LI><a href="#[68]">RadioRx</a> from radio.o(i.RadioRx) referenced from radio.o(.constdata)
 <LI><a href="#[74]">RadioRxBoosted</a> from radio.o(i.RadioRxBoosted) referenced from radio.o(.constdata)
 <LI><a href="#[65]">RadioSend</a> from radio.o(i.RadioSend) referenced from radio.o(.constdata)
 <LI><a href="#[5e]">RadioSetChannel</a> from radio.o(i.RadioSetChannel) referenced from radio.o(.constdata)
 <LI><a href="#[70]">RadioSetMaxPayloadLength</a> from radio.o(i.RadioSetMaxPayloadLength) referenced from radio.o(.constdata)
 <LI><a href="#[5d]">RadioSetModem</a> from radio.o(i.RadioSetModem) referenced from radio.o(.constdata)
 <LI><a href="#[71]">RadioSetPublicNetwork</a> from radio.o(i.RadioSetPublicNetwork) referenced from radio.o(.constdata)
 <LI><a href="#[61]">RadioSetRxConfig</a> from radio.o(i.RadioSetRxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[75]">RadioSetRxDutyCycle</a> from radio.o(i.RadioSetRxDutyCycle) referenced from radio.o(.constdata)
 <LI><a href="#[62]">RadioSetTxConfig</a> from radio.o(i.RadioSetTxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[6a]">RadioSetTxContinuousWave</a> from radio.o(i.RadioSetTxContinuousWave) referenced from radio.o(.constdata)
 <LI><a href="#[66]">RadioSleep</a> from radio.o(i.RadioSleep) referenced from radio.o(.constdata)
 <LI><a href="#[67]">RadioStandby</a> from radio.o(i.RadioStandby) referenced from radio.o(.constdata)
 <LI><a href="#[69]">RadioStartCad</a> from radio.o(i.RadioStartCad) referenced from radio.o(.constdata)
 <LI><a href="#[64]">RadioTimeOnAir</a> from radio.o(i.RadioTimeOnAir) referenced from radio.o(.constdata)
 <LI><a href="#[6c]">RadioWrite</a> from radio.o(i.RadioWrite) referenced from radio.o(.constdata)
 <LI><a href="#[6e]">RadioWriteBuffer</a> from radio.o(i.RadioWriteBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[42]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l152xe.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from uart-board.o(i.USART2_IRQHandler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[34]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from sysirqhandlers.o(i.UsageFault_Handler) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l152xe.o(.text) referenced from startup_stm32l152xe.o(RESET)
 <LI><a href="#[43]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l152xe.o(.text)
 <LI><a href="#[52]">fputc</a> from board.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[41]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[76]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l152xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertMsToTick
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertMsToTick
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertMsToTick
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertMsToTick
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ed]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[84]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[83]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1cf]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[1f1]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[77]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1f4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>AES_CMAC_Final</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[97]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[98]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[9a]"></a>AES_CMAC_Update</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[9d]"></a>BlockLowPowerDuringTask</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc-board.o(i.BlockLowPowerDuringTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BlockLowPowerDuringTask &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>BoardDeInitMcu</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.BoardDeInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcEnterLowPowerStopMode
</UL>

<P><STRONG><a name="[141]"></a>BoardDisableIrq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.BoardDisableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[142]"></a>BoardEnableIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.BoardEnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[57]"></a>BoardGetBatteryLevel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.BoardGetBatteryLevel))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1da]"></a>BoardGetRandomSeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board.o(i.BoardGetRandomSeed))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>BoardInitMcu</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, board.o(i.BoardInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoardPowerSource
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSystemWakeupTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>BoardInitPeriph</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.BoardInitPeriph))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysirqhandlers.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysirqhandlers.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DelayMs &rArr; DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[bf]"></a>DelayMsMcu</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay-board.o(i.DelayMsMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI0_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI15_10_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI1_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI2_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI3_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI4_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = EXTI9_5_IRQHandler &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>FifoInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(i.FifoInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[c2]"></a>FifoPop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fifo.o(i.FifoPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[c4]"></a>FifoPush</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fifo.o(i.FifoPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[ae]"></a>GetBoardPowerSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.GetBoardPowerSource))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[a4]"></a>GpioInit</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOn
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOff
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoDeInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[c5]"></a>GpioMcuInit</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, gpio-board.o(i.GpioMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[c8]"></a>GpioMcuRead</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpio-board.o(i.GpioMcuRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>

<P><STRONG><a name="[cb]"></a>GpioMcuSetInterrupt</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, gpio-board.o(i.GpioMcuSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>

<P><STRONG><a name="[c6]"></a>GpioMcuWrite</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio-board.o(i.GpioMcuWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>

<P><STRONG><a name="[cf]"></a>GpioRead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.GpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GpioRead &rArr; GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPaSelect
</UL>

<P><STRONG><a name="[d0]"></a>GpioSetInterrupt</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gpio.o(i.GpioSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoIrqInit
</UL>

<P><STRONG><a name="[d1]"></a>GpioWrite</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio.o(i.GpioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed2TimerEvent
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed1TimerEvent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[b0]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[b1]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[c0]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio-board.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>

<P><STRONG><a name="[ca]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
</UL>

<P><STRONG><a name="[ce]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>

<P><STRONG><a name="[d2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[d5]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[cc]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[d4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcEnterLowPowerStopMode
</UL>

<P><STRONG><a name="[19b]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcEnterLowPowerStopMode
</UL>

<P><STRONG><a name="[136]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[19a]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcEnterLowPowerStopMode
</UL>

<P><STRONG><a name="[da]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PWR_EnterSTOPMode &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcEnterLowPowerStopMode
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 640 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1002 bytes, Stack size 16 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[df]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[de]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 3046 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_DeactivateAlarm &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RTC_GetAlarm</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_GetAlarm &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
</UL>

<P><STRONG><a name="[e9]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_GetDate &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
</UL>

<P><STRONG><a name="[ea]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RTC_Init</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 1160 bytes, Stack size 32 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_SetAlarm_IT &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[f2]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[f1]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SPI_Init</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, stm32l1xx_hal_spi_ex.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[f6]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[103]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[107]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[106]"></a>IsFifoEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.IsFifoEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[104]"></a>IsFifoFull</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fifo.o(i.IsFifoFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsFifoFull &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[108]"></a>LoRaMacComputeMic</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[109]"></a>LoRaMacInitialization</STRONG> (Thumb, 680 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[111]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacJoinComputeSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[112]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[113]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFPortAllowed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[117]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>

<P><STRONG><a name="[118]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 752 bytes, Stack size 32 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[11c]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[120]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, loramaccrypto.o(i.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[121]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[122]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LoRaMacQueryTxPossible &rArr; RegionAdrNext &rArr; RegionAS923AdrNext &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysirqhandlers.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysirqhandlers.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>PrepareFrame</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMacCommandsToRepeat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc-board.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; BlockLowPowerDuringTask &rArr; RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockLowPowerDuringTask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcRecoverMcuStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
</UL>

<P><STRONG><a name="[ef]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[ed]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[63]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(i.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>RadioGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio.o(i.RadioGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>RadioGetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioGetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetBoardTcxoWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>RadioInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, radio.o(i.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioInit &rArr; SX126xSetTxParams &rArr; SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRegulatorMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetBufferBaseAddress
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>RadioIrqProcess</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, radio.o(i.RadioIrqProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = RadioIrqProcess &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetIrqStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>RadioIsChannelFree</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, radio.o(i.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RadioIsChannelFree &rArr; RadioSetChannel &rArr; SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>RadioOnDioIrq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.RadioOnDioIrq))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[51]"></a>RadioOnRxTimeoutIrq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.RadioOnRxTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioOnRxTimeoutIrq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[50]"></a>RadioOnTxTimeoutIrq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, radio.o(i.RadioOnTxTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioOnTxTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[60]"></a>RadioRandom</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, radio.o(i.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioRandom &rArr; RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>RadioRead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio.o(i.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioRead &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>RadioReadBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio.o(i.RadioReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioReadBuffer &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>RadioRssi</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioRssi &rArr; SX126xGetRssiInst &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>RadioRx</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radio.o(i.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RadioRx &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>RadioRxBoosted</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, radio.o(i.RadioRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RadioRxBoosted &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>RadioSend</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, radio.o(i.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RadioSend &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>RadioSetChannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio.o(i.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RadioSetChannel &rArr; SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, radio.o(i.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SX126xSetPacketParams &rArr; SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>RadioSetModem</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radio.o(i.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radio.o(i.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>RadioSetRxConfig</STRONG> (Thumb, 570 bytes, Stack size 96 bytes, radio.o(i.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = RadioSetRxConfig &rArr; SX126xSetModulationParams &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStopRxTimerOnPreambleDetect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetLoRaSymbNumTimeout
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>RadioSetRxDutyCycle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radio.o(i.RadioSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RadioSetRxDutyCycle &rArr; SX126xSetRxDutyCycle &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>RadioSetTxConfig</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, radio.o(i.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = RadioSetTxConfig &rArr; SX126xSetModulationParams &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, radio.o(i.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RadioSetTxContinuousWave &rArr; SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxContinuousWave
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>RadioSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio.o(i.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioSleep &rArr; SX126xSetSleep &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>RadioStandby</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioStandby &rArr; SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>RadioStartCad</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioStartCad &rArr; SX126xSetCad &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>RadioTimeOnAir</STRONG> (Thumb, 530 bytes, Stack size 112 bytes, radio.o(i.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RadioTimeOnAir &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>RadioWrite</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radio.o(i.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RadioWrite &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>RadioWriteBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio.o(i.RadioWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RadioWriteBuffer &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>RegionAS923AdrNext</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, regionas923.o(i.RegionAS923AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAS923AdrNext &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[185]"></a>RegionAS923AlternateDr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[164]"></a>RegionAS923ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, regionas923.o(i.RegionAS923ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionAS923ApplyCFList &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[187]"></a>RegionAS923ApplyDrOffset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, regionas923.o(i.RegionAS923ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAS923ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[167]"></a>RegionAS923CalcBackOff</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regionas923.o(i.RegionAS923CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAS923CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[169]"></a>RegionAS923ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regionas923.o(i.RegionAS923ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[165]"></a>RegionAS923ChannelAdd</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionAS923ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[166]"></a>RegionAS923ChannelsRemove</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[16d]"></a>RegionAS923ComputeRxWindowParameters</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, regionas923.o(i.RegionAS923ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RegionAS923ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[172]"></a>RegionAS923DlChannelReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[163]"></a>RegionAS923GetPhyParam</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextLowerTxDr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AdrNext
</UL>

<P><STRONG><a name="[175]"></a>RegionAS923InitDefaults</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, regionas923.o(i.RegionAS923InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionAS923InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[176]"></a>RegionAS923LinkAdrReq</STRONG> (Thumb, 382 bytes, Stack size 88 bytes, regionas923.o(i.RegionAS923LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionAS923LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[179]"></a>RegionAS923NewChannelReq</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionAS923NewChannelReq &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[17a]"></a>RegionAS923NextChannel</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, regionas923.o(i.RegionAS923NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[18d]"></a>RegionAS923RxConfig</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, regionas923.o(i.RegionAS923RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAS923RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[17d]"></a>RegionAS923RxParamSetupReq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[17e]"></a>RegionAS923SetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[180]"></a>RegionAS923SetContinuousWave</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, regionas923.o(i.RegionAS923SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RegionAS923SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[183]"></a>RegionAS923TxConfig</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, regionas923.o(i.RegionAS923TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RegionAS923TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LimitTxPower
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[190]"></a>RegionAS923TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionas923.o(i.RegionAS923TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[184]"></a>RegionAS923Verify</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, regionas923.o(i.RegionAS923Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[123]"></a>RegionAdrNext</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, region.o(i.RegionAdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionAdrNext &rArr; RegionAS923AdrNext &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
</UL>

<P><STRONG><a name="[11d]"></a>RegionAlternateDr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAlternateDr
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[129]"></a>RegionApplyCFList</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RegionApplyCFList &rArr; RegionAS923ApplyCFList &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[186]"></a>RegionApplyDrOffset</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionApplyDrOffset &rArr; RegionAS923ApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[b5]"></a>RegionCalcBackOff</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCalcBackOff &rArr; RegionAS923CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
</UL>

<P><STRONG><a name="[11b]"></a>RegionChanMaskSet</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionChanMaskSet &rArr; RegionAS923ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[168]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetJoinDc
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923CalcBackOff
</UL>

<P><STRONG><a name="[16c]"></a>RegionCommonChanDisable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelsRemove
</UL>

<P><STRONG><a name="[16a]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
</UL>

<P><STRONG><a name="[189]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[171]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 282 bytes, Stack size 96 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[16f]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[170]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[182]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>

<P><STRONG><a name="[17b]"></a>RegionCommonCountChannels</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[188]"></a>RegionCommonGetJoinDc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetJoinDc))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>

<P><STRONG><a name="[178]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 156 bytes, Stack size 44 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[177]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[17f]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>

<P><STRONG><a name="[17c]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[bd]"></a>RegionCommonValueInRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountNbOfEnabledChannels
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>

<P><STRONG><a name="[119]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionAS923ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[135]"></a>RegionDlChannelReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionDlChannelReq &rArr; RegionAS923DlChannelReq &rArr; VerifyTxFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[10b]"></a>RegionGetPhyParam</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionGetPhyParam &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[10c]"></a>RegionInitDefaults</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionInitDefaults &rArr; RegionAS923InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[10a]"></a>RegionIsActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[131]"></a>RegionLinkAdrReq</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionLinkAdrReq &rArr; RegionAS923LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[133]"></a>RegionNewChannelReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionNewChannelReq &rArr; RegionAS923NewChannelReq &rArr; RegionAS923ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[18c]"></a>RegionNextChannel</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[12c]"></a>RegionRxConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionRxConfig &rArr; RegionAS923RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[132]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionAS923RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[12b]"></a>RegionSetBandTxDone</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionSetBandTxDone &rArr; RegionAS923SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[18e]"></a>RegionSetContinuousWave</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RegionSetContinuousWave &rArr; RegionAS923SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[18f]"></a>RegionTxConfig</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RegionTxConfig &rArr; RegionAS923TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[134]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[115]"></a>RegionVerify</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionVerify &rArr; RegionAS923Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[191]"></a>RtcComputeElapsedTime</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtc-board.o(i.RtcComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[199]"></a>RtcEnterLowPowerStopMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtc-board.o(i.RtcEnterLowPowerStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RtcEnterLowPowerStopMode &rArr; BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
</UL>

<P><STRONG><a name="[1c1]"></a>RtcGetAdjustedTimeoutValue</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetAdjustedTimeoutValue))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[19d]"></a>RtcGetElapsedAlarmTime</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtc-board.o(i.RtcGetElapsedAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RtcGetElapsedAlarmTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
</UL>

<P><STRONG><a name="[19e]"></a>RtcGetTimerValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc-board.o(i.RtcGetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RtcGetTimerValue &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[a9]"></a>RtcInit</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, rtc-board.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RtcInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[9e]"></a>RtcRecoverMcuStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc-board.o(i.RtcRecoverMcuStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RtcRecoverMcuStatus &rArr; BoardInitMcu &rArr; CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockLowPowerDuringTask
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>RtcSetTimeout</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtc-board.o(i.RtcSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertMsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[1a2]"></a>SX126xAntSwOff</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xAntSwOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX126xAntSwOff &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
</UL>

<P><STRONG><a name="[1a3]"></a>SX126xAntSwOn</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xAntSwOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>

<P><STRONG><a name="[1a4]"></a>SX126xCalibrateImage</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sx126x.o(i.SX126xCalibrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xCalibrateImage &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>

<P><STRONG><a name="[1a6]"></a>SX126xCheckDeviceReady</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx126x.o(i.SX126xCheckDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOn
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[144]"></a>SX126xClearIrqStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(i.SX126xClearIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xClearIrqStatus &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[13a]"></a>SX126xGetBoardTcxoWakeupTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1261dvk1bas-board.o(i.SX126xGetBoardTcxoWakeupTime))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>

<P><STRONG><a name="[143]"></a>SX126xGetIrqStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx126x.o(i.SX126xGetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xGetIrqStatus &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[139]"></a>SX126xGetOperatingMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xGetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>

<P><STRONG><a name="[1aa]"></a>SX126xGetPaSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1261dvk1bas-board.o(i.SX126xGetPaSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xGetPaSelect &rArr; GpioRead &rArr; GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>

<P><STRONG><a name="[146]"></a>SX126xGetPacketStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xGetPacketStatus &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[14c]"></a>SX126xGetPacketType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xGetPacketType))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>

<P><STRONG><a name="[145]"></a>SX126xGetPayload</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sx126x.o(i.SX126xGetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX126xGetPayload &rArr; SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[148]"></a>SX126xGetRssiInst</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xGetRssiInst &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[1ac]"></a>SX126xGetRxBufferStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetRxBufferStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
</UL>

<P><STRONG><a name="[13b]"></a>SX126xInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx126x.o(i.SX126xInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xInit &rArr; SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xIoIrqInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio2AsRfSwitchCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[a1]"></a>SX126xIoDeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xIoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX126xIoDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[ad]"></a>SX126xIoInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX126xIoInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[1af]"></a>SX126xIoIrqInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx1261dvk1bas-board.o(i.SX126xIoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX126xIoIrqInit &rArr; GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[1ad]"></a>SX126xReadBuffer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sx1261dvk1bas-board.o(i.SX126xReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xReadBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
</UL>

<P><STRONG><a name="[1a9]"></a>SX126xReadCommand</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sx1261dvk1bas-board.o(i.SX126xReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetIrqStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>

<P><STRONG><a name="[149]"></a>SX126xReadRegister</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>

<P><STRONG><a name="[14a]"></a>SX126xReadRegisters</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sx1261dvk1bas-board.o(i.SX126xReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadBuffer
</UL>

<P><STRONG><a name="[1ae]"></a>SX126xReset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX126xReset &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[14e]"></a>SX126xSendPayload</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX126xSendPayload &rArr; SX126xSetTx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[13e]"></a>SX126xSetBufferBaseAddress</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetBufferBaseAddress &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[15c]"></a>SX126xSetCad</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetCad &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
</UL>

<P><STRONG><a name="[1b4]"></a>SX126xSetCrcPolynomial</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetCrcPolynomial &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>

<P><STRONG><a name="[1b5]"></a>SX126xSetCrcSeed</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetCrcSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>

<P><STRONG><a name="[1b0]"></a>SX126xSetDio2AsRfSwitchCtrl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetDio2AsRfSwitchCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetDio2AsRfSwitchCtrl &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[140]"></a>SX126xSetDioIrqParams</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sx126x.o(i.SX126xSetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[157]"></a>SX126xSetLoRaSymbNumTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetLoRaSymbNumTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetLoRaSymbNumTimeout &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[154]"></a>SX126xSetModulationParams</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, sx126x.o(i.SX126xSetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SX126xSetModulationParams &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[1b7]"></a>SX126xSetPaConfig</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetPaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>

<P><STRONG><a name="[14d]"></a>SX126xSetPacketParams</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, sx126x.o(i.SX126xSetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX126xSetPacketParams &rArr; SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[150]"></a>SX126xSetPacketType</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetPacketType &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[1b2]"></a>SX126xSetPayload</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetPayload &rArr; SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
</UL>

<P><STRONG><a name="[13d]"></a>SX126xSetRegulatorMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetRegulatorMode &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[14f]"></a>SX126xSetRfFrequency</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, sx126x.o(i.SX126xSetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX126xSetRfFrequency &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrateImage
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
</UL>

<P><STRONG><a name="[159]"></a>SX126xSetRfTxPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1261dvk1bas-board.o(i.SX126xSetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX126xSetRfTxPower &rArr; SX126xSetTxParams &rArr; SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[147]"></a>SX126xSetRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetRx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[14b]"></a>SX126xSetRxBoosted</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX126xSetRxBoosted &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[158]"></a>SX126xSetRxDutyCycle</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SX126xSetRxDutyCycle &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
</UL>

<P><STRONG><a name="[15b]"></a>SX126xSetSleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetSleep &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOff
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>

<P><STRONG><a name="[13c]"></a>SX126xSetStandby</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[152]"></a>SX126xSetStopRxTimerOnPreambleDetect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetStopRxTimerOnPreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetStopRxTimerOnPreambleDetect &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[155]"></a>SX126xSetSyncWord</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetSyncWord &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[1b3]"></a>SX126xSetTx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xSetTx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
</UL>

<P><STRONG><a name="[15a]"></a>SX126xSetTxContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX126xSetTxContinuousWave &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[13f]"></a>SX126xSetTxParams</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX126xSetTxParams &rArr; SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPaSelect
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[156]"></a>SX126xSetWhiteningSeed</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SX126xSetWhiteningSeed &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[1a8]"></a>SX126xWaitOnBusy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1261dvk1bas-board.o(i.SX126xWaitOnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xWaitOnBusy &rArr; GpioRead &rArr; GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[1a7]"></a>SX126xWakeup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1261dvk1bas-board.o(i.SX126xWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX126xWakeup &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[1b8]"></a>SX126xWriteBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx1261dvk1bas-board.o(i.SX126xWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPayload
</UL>

<P><STRONG><a name="[1a5]"></a>SX126xWriteCommand</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sx1261dvk1bas-board.o(i.SX126xWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxContinuousWave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStopRxTimerOnPreambleDetect
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRegulatorMode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetLoRaSymbNumTimeout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetBufferBaseAddress
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPaConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio2AsRfSwitchCtrl
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrateImage
</UL>

<P><STRONG><a name="[151]"></a>SX126xWriteRegister</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1261dvk1bas-board.o(i.SX126xWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>

<P><STRONG><a name="[161]"></a>SX126xWriteRegisters</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sx1261dvk1bas-board.o(i.SX126xWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xAntSwOn &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteBuffer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
</UL>

<P><STRONG><a name="[116]"></a>Send</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1b9]"></a>SendFrameOnChannel</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SendFrameOnChannel &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[11e]"></a>SetTxContinuousWave</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SetTxContinuousWave &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[11f]"></a>SetTxContinuousWave1</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SetTxContinuousWave1 &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[a0]"></a>SpiDeInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, spi-board.o(i.SpiDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[1bb]"></a>SpiFormat</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, spi-board.o(i.SpiFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[1bc]"></a>SpiFrequency</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi-board.o(i.SpiFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[1b1]"></a>SpiInOut</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, spi-board.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiInOut &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
</UL>

<P><STRONG><a name="[ac]"></a>SpiInit</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, spi-board.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SpiInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFrequency
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFormat
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>TimerGetCurrentTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TimerGetCurrentTime &rArr; RtcGetTimerValue &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[b4]"></a>TimerGetElapsedTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[1be]"></a>TimerGetValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.TimerGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TimerGetValue &rArr; RtcGetElapsedAlarmTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[b6]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSystemWakeupTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>TimerIrqHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, timer.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>TimerLowPowerHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, timer.o(i.TimerLowPowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TimerLowPowerHandler &rArr; RtcEnterLowPowerStopMode &rArr; BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcEnterLowPowerStopMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoardPowerSource
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSystemWakeupTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>TimerSetValue</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSystemWakeupTime
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[b8]"></a>TimerStart</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, timer.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave1
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateSystemWakeupTime
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[bb]"></a>TimerStop</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, timer.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetValue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckToDisableAckTimeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed2TimerEvent
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed1TimerEvent
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart-board.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>UartConfig</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, uart.o(i.UartConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UartConfig &rArr; UartMcuConfig &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[a7]"></a>UartInit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UartInit &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[1c4]"></a>UartMcuConfig</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, uart-board.o(i.UartMcuConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UartMcuConfig &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[1c5]"></a>UartMcuInit</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uart-board.o(i.UartMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1c6]"></a>UartMcuPutChar</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart-board.o(i.UartMcuPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartMcuPutChar &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardEnableIrq
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>

<P><STRONG><a name="[1c7]"></a>UartPutChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart.o(i.UartPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartPutChar &rArr; UartMcuPutChar &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysirqhandlers.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l152xe.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f6]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[125]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioOnRxTimeoutIrq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ca]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cb]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cc]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cd]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ce]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1d0]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1dd]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[95]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>

<P><STRONG><a name="[99]"></a>aes_set_key</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
</UL>

<P><STRONG><a name="[c9]"></a>assert_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[15e]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[160]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[52]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; UartPutChar &rArr; UartMcuPutChar &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = main &rArr; SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetRandomSeed
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[96]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[12f]"></a>memcpyr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilities.o(i.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[94]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilities.o(i.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[1b6]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
</UL>

<P><STRONG><a name="[1e0]"></a>rand1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utilities.o(i.rand1))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[174]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>rint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rint.o(i.rint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rint &rArr; _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[198]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertMsToTick
</UL>

<P><STRONG><a name="[1de]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[10f]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>McpsConfirm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = McpsConfirm &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[54]"></a>McpsIndication</STRONG> (Thumb, 644 bytes, Stack size 56 bytes, main.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = McpsIndication &rArr; OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[55]"></a>MlmeConfirm</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, main.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MlmeConfirm &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[56]"></a>MlmeIndication</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.MlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = MlmeIndication &rArr; OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxNextPacketTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[59]"></a>OnLed1TimerEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.OnLed1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnLed1TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5a]"></a>OnLed2TimerEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.OnLed2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnLed2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[58]"></a>OnTxNextPacketTimerEvent</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, main.o(i.OnTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = OnTxNextPacketTimerEvent &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1db]"></a>PrepareTxFrame</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, main.o(i.PrepareTxFrame))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>SendFrame</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, main.o(i.SendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = SendFrame &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>BoardUnusedIoInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.BoardUnusedIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BoardUnusedIoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStandbyMode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[af]"></a>CalibrateSystemWakeupTime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board.o(i.CalibrateSystemWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CalibrateSystemWakeupTime &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLowPowerHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[44]"></a>OnCalibrateSystemWakeupTimeTimerEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.OnCalibrateSystemWakeupTimeTimerEvent))
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.CalibrateSystemWakeupTime)
</UL>
<P><STRONG><a name="[a5]"></a>SystemClockConfig</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, board.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[ab]"></a>SystemClockReConfig</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, board.o(i.SystemClockReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClockReConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[194]"></a>RtcComputeTimerTimeToAlarmTick</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, rtc-board.o(i.RtcComputeTimerTimeToAlarmTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RtcComputeTimerTimeToAlarmTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[137]"></a>RtcComputeWakeUpTime</STRONG> (Thumb, 76 bytes, Stack size 104 bytes, rtc-board.o(i.RtcComputeWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RtcComputeWakeUpTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetAlarm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertTickToMs
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>RtcConvertCalendarTickToTimerTime</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, rtc-board.o(i.RtcConvertCalendarTickToTimerTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RtcConvertCalendarTickToTimerTime &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
</UL>

<P><STRONG><a name="[197]"></a>RtcConvertMsToTick</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, rtc-board.o(i.RtcConvertMsToTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RtcConvertMsToTick &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
</UL>

<P><STRONG><a name="[193]"></a>RtcConvertTickToMs</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, rtc-board.o(i.RtcConvertTickToMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetElapsedAlarmTime
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeElapsedTime
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
</UL>

<P><STRONG><a name="[196]"></a>RtcGetCalendar</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, rtc-board.o(i.RtcGetCalendar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcConvertCalendarTickToTimerTime
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeWakeUpTime
</UL>

<P><STRONG><a name="[1a1]"></a>RtcStartWakeUpAlarm</STRONG> (Thumb, 164 bytes, Stack size 136 bytes, rtc-board.o(i.RtcStartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendar
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcComputeTimerTimeToAlarmTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
</UL>

<P><STRONG><a name="[d8]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d9]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e2]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[ff]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>UART_Receive_IT</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>UART_SetConfig</STRONG> (Thumb, 950 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_SetConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>UART_Transmit_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>AddMacCommand</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, loramac.o(i.AddMacCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AddMacCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[b3]"></a>CalculateBackOff</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CalculateBackOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[ba]"></a>CheckToDisableAckTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, loramac.o(i.CheckToDisableAckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CheckToDisableAckTimeout &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[114]"></a>IsFPortAllowed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loramac.o(i.IsFPortAllowed))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[127]"></a>IsStickyMacCommandPending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramac.o(i.IsStickyMacCommandPending))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[49]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, loramac.o(i.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[45]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 880 bytes, Stack size 16 bytes, loramac.o(i.OnMacStateCheckTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMlmeScheduleUplinkIndication
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStickyMacCommandPending
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4b]"></a>OnRadioRxDone</STRONG> (Thumb, 1758 bytes, Stack size 136 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = OnRadioRxDone &rArr; PrepareRxDoneAbort &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckToDisableAckTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4c]"></a>OnRadioRxError</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OnRadioRxError &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4e]"></a>OnRadioRxTimeout</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OnRadioRxTimeout &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4a]"></a>OnRadioTxDone</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = OnRadioTxDone &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[4d]"></a>OnRadioTxTimeout</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, loramac.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OnRadioTxTimeout &rArr; OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[47]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnRxWindow1TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[48]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRx2Window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[46]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[11a]"></a>OpenContinuousRx2Window</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loramac.o(i.OpenContinuousRx2Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = OpenContinuousRx2Window &rArr; OnRxWindow2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[130]"></a>ParseMacCommandsToRepeat</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, loramac.o(i.ParseMacCommandsToRepeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParseMacCommandsToRepeat
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[128]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PrepareRxDoneAbort &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[12a]"></a>ProcessMacCommands</STRONG> (Thumb, 868 bytes, Stack size 64 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionAS923LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[10d]"></a>ResetMacParameters</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionAS923InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[12d]"></a>RxWindowSetup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RxWindowSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[126]"></a>ScheduleTx</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ScheduleTx &rArr; RegionNextChannel &rArr; RegionAS923NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; RtcComputeElapsedTime &rArr; RtcConvertTickToMs &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[9c]"></a>SetMlmeScheduleUplinkIndication</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramac.o(i.SetMlmeScheduleUplinkIndication))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMacCommand
</UL>

<P><STRONG><a name="[124]"></a>ValidatePayloadLength</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, loramac.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ValidatePayloadLength &rArr; RegionGetPhyParam &rArr; RegionAS923GetPhyParam &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
</UL>

<P><STRONG><a name="[bc]"></a>CountNbOfEnabledChannels</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, regionas923.o(i.CountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[16e]"></a>GetBandwidth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionas923.o(i.GetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[173]"></a>GetNextLowerTxDr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regionas923.o(i.GetNextLowerTxDr))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[181]"></a>LimitTxPower</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, regionas923.o(i.LimitTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>

<P><STRONG><a name="[16b]"></a>VerifyTxFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, regionas923.o(i.VerifyTxFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyTxFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>

<P><STRONG><a name="[18b]"></a>CountChannels</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, regioncommon.o(i.CountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>

<P><STRONG><a name="[153]"></a>RadioGetFskBandwidthRegValue</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, radio.o(i.RadioGetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[c3]"></a>FifoNext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fifo.o(i.FifoNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>

<P><STRONG><a name="[1c2]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1bf]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1c3]"></a>TimerInsertTimer</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, timer.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1c0]"></a>TimerSetTimeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TimerSetTimeout &rArr; RtcSetTimeout &rArr; RtcStartWakeUpAlarm &rArr; RtcGetCalendar &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimeout
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAdjustedTimeoutValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>

<P><STRONG><a name="[1d3]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1d5]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1dc]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[1d8]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[1d6]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1d7]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[1d4]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
